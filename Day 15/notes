JavaScript is synchronus but can be made to asynchronus if we need.

the "script" in JS means functions, means it is based on functions.

in JS, functions are first class citizens, it means:
    1. functions can be used as an argument.
    2. functions can be assigned to a variable.
    3. funcrions can also be used as return statement.


setTimeout() is an asynch statement
    for eg if a loop is too log, use setTimeout such that all stetement after the statement is executed and loop returns value when it is completed.

callback: used when 2 functions should depend on each other
    1. means function can be used as an argument.
    2. it is a function that is executed after another funcion has finished executing (function inside another function).
    nested callbacks are called as callback(callback inside callback inside callback....)
    var stuednts = 
        [
            {name:"Sachin", subject:"Java"},
            {name:"Manish", subject:"Python"},
            {name:"Rupali", subject:"c++"},
        ];

    /////////// using setTimeout(), it will not give accruate result////////

    function admitStudent(student)
        {
            setTimeout(() => {
                stuednts.push(student);
                console.log("Admitted");
            }, 3000);
        }

    function displayStudent()
        {
            setTimeout(()=> 
            {
                var str = "";
                stuednts.forEach((student) =>
                    {
                        str += student.name + " ";
                    });
                console.log("Fetched");
            },1000);
        }

    var newStudent = {name:"Rahul", subject:"react"};
    admitStudent(newStudent);
    
    ///////////using callback//////////////////
    function admitStudent(student, callback)
        {
            setTimeout(() => {
                stuednts.push(student);
                console.log("Admitted");
                callback();
            }, 3000);
        }

    function displayStudent()
        {
            setTimeout(()=> 
            {
                var str = "";
                stuednts.forEach((student) =>
                    {
                        str += student.name + " ";
                    });
                console.log("Fetched");
            },1000);
        }

    var newStudent = {name:"Rahul", subject:"react"};
    admitStudent(newStudent);



Promise: to communicate with APIs
    is used when data is called to/from the Server
    it is a future value, will not be returned immediately, can take Time
    pending, fulfilled, rejected are 3 states of promise.

    function sayHi()
    {
        return new Promise((resolve, reject) =>
        {
            console.log("checking...."); // msg displatyed while req is pending
            setTimeout(() => // for pending
            {
                const err = false;
                if(!err) // API is called here
                {
                    resolve("completed");
                }
                else
                {
                    reject("cannot be complated");
                }
            }, 3000);
        });
    }

    console.log(sayHi());
    
    //////// consume a promise//////////////
    sayHi().then((val) => console.log(val)) // value when promise is fullfilled
    .catch((err) => console.log(val)); // value when promise is rejected

API: k/a end point of the server, gives a point from where to fetch data
API call:
    ways:
        1. XHR
            // const API_URL = "ulr_of_the_api_from_where_to_get_data";
            const API_URL = "https://jsonplaceholder.typicode.com/users";

            function getData(ulr)
            {
                console.log("XHR");
                return new Promise((resolve, reject) =>
                {
                    // create an instance of XHR
                    var request = new XMLHttpRequest(); // it is a class to connect with the API
                    request.open("GET", url); // wheather to get or send data, to/from where
                    request.send(); // this is a method to send req to API
                    request.onload = () =>
                    {
                        console.log(request); // this will display the response from the API
                        console.log(request.response); // this will display the data from the API

                        if(request.status === 200) // 200 means all is good
                        {
                            resolve(request.response);
                        }
                        else
                        {
                            reject("not able to fetch data");
                        }
                    };
                });
            }
            getData(API_URL)
            .then((val) => 
            {
                console.log(JSON.parse(val));
                displayData(JSON.parse(val));
            }) // json.parse is used to convert the default string input from api to array.
            .catch((err) => console.log("Error" + err));

            function displayData(serverData)
            {
                for(var user of serverData) // user of means will point to user of each iteration
                {
                    let newtr = document.createElement('tr');
                    
                    let newtd1 = document.createElement('td');
                    let newtd2 = document.createElement('td');
                    let newtd3 = document.createElement('td');
                    let newtd4 = document.createElement('td');

                    newtd1.innerText = "" + user.id;
                    newtd2.innerText = "" + user.name;
                    newtd3.innerText = "" + user.email;
                    newtd4.innerText = "" + user.phone;

                    newtr.appendChile(newtd1);
                    newtr.appendChile(newtd2);
                    newtr.appendChile(newtd3);
                    newtr.appendChile(newtd4);

                    document.getElementById("myTable").appendChild(newtr);
                }
            }

            in HTML:
                <table id="mytable">
                    <tr>
                        <th>S.No.</th>
                        <th>Name.</th>
                        <th>Email</th>
                        <th>Phone</th>
                    </tr>
                    </table>
        2. fetch
        function getData(ulr)
            {
                console.log("fetch");
                var r = fetch(ulr);
                console.log(r);

                fetch(ulr)
                .then((val) => 
                {
                    return val.json();
                })
            .then((res) => displayData(res))
            .catch((err) => console.log(err));
            }
            getData(API_URL);

        3. Async and await
            //////////// to remove then-catch//////////////
            async function getData(ulr)
            {
                console.log("Async and awaiy");
                
                var data = await fetch(url);
                var result = await data.json();
                console.log(data);
                displayData(data);
            
            }
            getData(API_URL);
            // https://api.covid19api.com/summary

        3. Third Party packages (c/a Axios)